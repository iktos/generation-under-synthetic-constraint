import os
import pandas as pd
from rdkit.Chem import MolFromSmiles
import argparse
from pymongo import MongoClient
from guacamol.guacamol.common_scoring_functions_iktos import pi3kScoringFunction, mtorScoringFunction, QEDScoringFunction, MaxTanimotoScoringFunction
from guacamol.guacamol.standard_benchmarks_iktos import pi3kmtor_bench

def score_list_pi3kmtor(smiles_list):
    file_smiles = "pi3kmtor/pi3kmtor.smiles"
    with open(file_smiles, "r")as f:
        smiles_ref = f.readlines()
    pi3k = pi3kScoringFunction()
    pi3k.modifier = None
    mtor = mtorScoringFunction()
    mtor.modifier = None
    qed = QEDScoringFunction()
    qed.modifier = None
    list_mols = [MolFromSmiles(s) for s in smiles_list]
    similarity = MaxTanimotoScoringFunction(smiles_ref=smiles_ref, fp_type="ECFP4")
    predictions = pd.DataFrame(data=smiles_list)
    predictions["qed"] = [qed.score_mol(m) for m in list_mols]
    predictions["simi"] = [similarity.score_mol(m) for m in list_mols]
    predictions["pi3k"] = [pi3k.score_mol(m) for m in list_mols]
    predictions["mtor"] = [mtor.score_mol(m) for m in list_mols]
    predictions["smiles"] = smiles_list
    pi3kmtor_benchmark = pi3kmtor_bench(score_synth=None)
    predictions["reward"] = pi3kmtor_benchmark.objective.score_list(smiles_list)
    predictions.index = predictions.smiles.to_list()
    return predictions


def add_score_to_db_pi3kmtor(database):
    client = MongoClient(os.getenv("MONGO_URL"))
    DB = client[os.getenv("DB_STORAGE")]
    all_molecules_db = list(DB[database].find({}))
    all_molecules = [doc["smiles"] for doc in all_molecules_db]
    all_molecules = list(set(all_molecules))
    print("Going to score {} molecules".format(len(all_molecules)))
    
    calc_for_smiles = []
    score_zero = []
    for s in all_molecules:
        if MolFromSmiles(s) is not None:
            calc_for_smiles.append(s)
        else:
            score_zero.append(s)

    if len(calc_for_smiles)>0:
        pi3kmtor_scores = score_list_pi3kmtor(list(set(calc_for_smiles)))
    i=0
    list_to_insert = []
    for doc in all_molecules_db:
        i += 1
        if i % 40000 == 0:
            print(i)
        smiles = doc["smiles"]

        if smiles in list(pi3kmtor_scores.index):
            pred_this = pi3kmtor_scores.loc[smiles]
            doc["pi3k"] = pred_this["pi3k"]
            doc["mTor"] = pred_this["mtor"]
            doc["qed"] = pred_this["qed"]
            doc["simi"] = pred_this["simi"]
            doc["valid"] = True
            doc["reward"] = pred_this["reward"]

        if smiles in score_zero:
            doc["pi3k"] = None
            doc["mTor"] = None
            doc["qed"] = None
            doc["simi"] = None
            doc["valid"] = False
            doc["reward"] = 0

        list_to_insert.append(doc)


    if len(list_to_insert) > 1:
        chunk = 3000
        for k in range(int(len(list_to_insert)/1000)+1):
            tmp = list_to_insert[k*chunk: (k+1)*chunk]
            if len(tmp)==0:
                continue
            DB[database].delete_many({"_id":{"$in": [doc["_id"] for doc in tmp]}})
            DB[database].insert_many(tmp)

    print("Done !")


if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--database', type=str)
    args = parser.parse_args()
    add_score_to_db_pi3kmtor(args.database)
